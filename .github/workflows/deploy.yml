# This workflow will build and deploy the application to Vercel
# Last updated: $(date) to trigger workflow
name: Deploy to Vercel Production

# Trigger workflow on push to main, pull requests, or manual dispatch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Debug Repository
        run: |
          echo "Repository URL: ${{ github.server_url }}/${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Debug Environment
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo "Package.json contents:"
          cat package.json
          echo "Package-lock.json exists:"
          test -f package-lock.json && echo "Yes" || echo "No"
          
      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "::error::VERCEL_TOKEN is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then
            echo "::error::VERCEL_ORG_ID is not set"
            exit 1
          fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then
            echo "::error::VERCEL_PROJECT_ID is not set"
            exit 1
          fi
          
      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "VITE_API_URL_PROD=${{ secrets.VITE_API_URL_PROD }}" >> .env
          echo "VITE_APP_NAME=${{ secrets.VITE_APP_NAME }}" >> .env
          echo "VITE_APP_VERSION=${{ secrets.VITE_APP_VERSION }}" >> .env
          echo "VITE_APP_DOMAIN=${{ secrets.VITE_APP_DOMAIN }}" >> .env
          echo "NODE_ENV=production" >> .env

      - name: Build application
        run: |
          echo "Running build script..."
          npm run build || {
            echo "Build failed. Checking for errors..."
            echo "TypeScript errors:"
            npx tsc --noEmit
            echo "Vite build errors:"
            npx vite build
            exit 1
          }
        env:
          NODE_ENV: production
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD }}
          VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
          VITE_APP_VERSION: ${{ secrets.VITE_APP_VERSION }}
          VITE_APP_DOMAIN: ${{ secrets.VITE_APP_DOMAIN }}
          VITE_DEV_MODE: 'production'
          VITE_CSP_ENABLED: 'true'
          VITE_ENABLE_SERVICE_WORKER: 'true'
          VITE_ENABLE_PWA: 'true'
          VITE_CACHE_VERSION: '1.0.0'
          VITE_CACHE_DURATION: '3600'
        
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }} 